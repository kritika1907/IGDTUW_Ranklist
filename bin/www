let app = require('../app');
let debug = require('debug')('basecode:server');
let http = require('http');

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

/**
 * Get port from environment and store in Express.
 */
let port = NormalizePort(global.appConfig.SERVER_PORT || '3000');
app.set('port', global.appConfig.SERVER_PORT);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, global.appConfig.SERVER_IP);
server.on('error', OnError);
server.on('listening', OnListening);

/**
 * Normalize a port into a number, string, or false.
 * @param {string} val - The port value.
 * @returns {number|string|boolean} - The normalized port.
 */
function NormalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param {Error} error - The error object.
 * @throws {Error} - Throws an error for non-listen errors.
 */
function OnError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 * @returns {void} - The normalized port.
 */
function OnListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  global.log('info', `Application Running on http://${addr.address}:${addr.port}`);
  console.log(`Application Running on http://${addr.address}:${addr.port}`);
}
