{
    "env": {
        "browser": true,
        "es2021": true,
        "node": true,
        "jquery": true
    },
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module"
    },
    "plugins": [
        "unicorn"
    ],
    "extends": [
        "eslint:recommended",
        "prettier"
    ],
    "ignorePatterns": [
        "**/vendors/**/*.js",
        "test/**/*.js",
        "webpack_obfuscator/**/*.js",
        "dist/**/*.js"
    ],
    "globals": {
        "_": "readonly"
    },
    "rules": {
        // Check file names: pascal case
        "unicorn/filename-case" : ["error", {
            "case": "pascalCase",
            "ignore": ["app.js", "index.js"]
        }],
        
        // Check magic numbers
        "no-magic-numbers": ["error", { "ignore": [0], "ignoreArrayIndexes": true}],

        // Check `return` statements in callbacks of array methods
        "array-callback-return": ["error", {
            "allowImplicit": false,
            "checkForEach": false
        }],

        // Disallow `await` inside of loops
        "no-await-in-loop": "error",
        
        // Disallow returning value from constructor
        "no-constructor-return": "error",

        // Disallow duplicate module imports
        "no-duplicate-imports": "error",

        // Disallow returning values from Promise executor functions
        "no-promise-executor-return": "error",

        // Disallow comparisons where both sides are exactly the same
        "no-self-compare": "error",

        // Disallow template literal placeholder syntax in regular strings
        "no-template-curly-in-string": "error",

        // Disallow unmodified loop conditions
        "no-unmodified-loop-condition": "error",

        // Disallow loops with a body that allows only one iteration
        "no-unreachable-loop": "error",

        // Disallow unused private class members
        "no-unused-private-class-members": "error",
        
        // Layout & Formatting rules --------------------------------------------
        // Require space inside array brackets
        "array-bracket-spacing": ["error", "never"],

        // Require space before and after the arrow in arrow functions
        "arrow-spacing": ["error", { "before": true, "after": true }],

        // Require space inside single-line blocks
        "block-spacing": ["error", "always"],

        // Enforce one true brace style
        "brace-style": ["error", "1tbs", { "allowSingleLine": true }], 

        // Require space after comma
        "comma-spacing": ["error", { "before": false, "after": true }],
        
        // Disallow space between function identifiers and opening parenthesis
        "func-call-spacing": ["error", "never"],

        // Require space between keys and values in object literal properties
        "key-spacing": ["error", { "beforeColon": true, "afterColon": true }],

        // Require space before and after keywords
        "keyword-spacing": ["error", { "before": true, "after": true }],

        // Disallow the omission of parentheses when invoking a constructor with no arguments
        "new-parens": "error",

        // Disallow unnecessary parentheses around function expressions
        "no-extra-parens": ["error", "functions"],

        // Disallow multiple spaces
        "no-multi-spaces": "error",

        // Disallow multiple empty lines (no new lines at the beginning and the end)
        "no-multiple-empty-lines": ["error", { "max": 1, "maxBOF": 0, "maxEOF": 0 }],

        // Disallow trailing whitespace at the end of lines
        "no-trailing-spaces": "error",

        // Disallow whitespace before properties
        "no-whitespace-before-property": "error",
       
        // Disallow padding within blocks
        "padded-blocks": ["error", { "blocks": "never", "classes": "never", "switches": "never" }],
        
        // Require space after semicolons
        "semi-spacing": ["error", { "before": false, "after": true }],

        // Require space before blocks
        "space-before-blocks": ["error", "always"],

        // Require or disallow space before function opening parenthesis
        "space-before-function-paren": ["error", {
            "anonymous": "always",
            "named": "never",
            "asyncArrow": "always"
        }],

        // Require spaces around operators
        "space-infix-ops": "error",

        // Require or disallow spaces before/after unary operators
        "space-unary-ops": ["error", { "words": true, "nonwords": false }],

        // Require space around colons of switch statements 
        "switch-colon-spacing": ["error", {"after": true, "before": false}]
    }
}
